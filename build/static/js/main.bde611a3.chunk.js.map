{"version":3,"sources":["components/Link.js","components/LinkList.js","components/App.js","reportWebVitals.js","index.js"],"names":["Link","props","link","description","url","LinkList","FEED_QUERY","gql","data","useQuery","links","map","id","App","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"uRAaeA,EAXF,SAACC,GACZ,IAAQC,EAASD,EAATC,KACR,OACE,8BACE,gCACGA,EAAKC,YADR,KACuBD,EAAKE,IAD5B,U,gBCuBSC,EAzBE,WACb,IAAMC,EAAaC,YAAH,kJASRC,EAASC,YAASH,GAAlBE,KAER,OACE,8BACGA,GACC,mCACGA,EAAKE,MAAMC,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAKU,YCTfC,E,4JANb,WACE,OAAO,cAAC,EAAD,Q,GAFOC,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gCCQRQ,EAAWC,YAAe,CAC9BC,IAAK,sCAIDC,EAAS,IAAIC,IAAa,CAC9B1B,KAAMsB,EACNK,MAAO,IAAIC,MAIbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.bde611a3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Link = (props) => {\n  const { link } = props;\n  return (\n    <div>\n      <div>\n        {link.description} ({link.url})\n      </div>\n    </div>\n  );\n};\n\nexport default Link;","import React from 'react';\nimport Link from './Link';\nimport { useQuery, gql } from '@apollo/client'; //hace un GET, o llamada tipo query\n\nconst LinkList = () => {\n    const FEED_QUERY = gql`\n        query {\n            links {\n                url\n                description\n            }\n        }\n    `; \n\n    const { data } = useQuery(FEED_QUERY);\n\n    return (\n      <div>\n        {data && (\n          <>\n            {data.links.map((link) => (\n              <Link key={link.id} link={link} />\n            ))}\n          </>\n        )}\n      </div>\n    );\n};\n\nexport default LinkList;","import React, { Component } from 'react';\nimport './../styles/App.css';\nimport LinkList from './LinkList';\n//import CreateLink from './CreateLink';\n\nclass App extends Component {\n  render() {\n    return <LinkList />;\n    //return <CreateLink />;\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\n// 1\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\n\n// 2\nconst httpLink = createHttpLink({\n  uri: 'http://34.71.227.51:8174/graphql/'\n});\n\n// 3\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\n// 4\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}